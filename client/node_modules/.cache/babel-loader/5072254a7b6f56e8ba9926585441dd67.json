{"ast":null,"code":"var _jsxFileName = \"/Users/eddyyeung/Desktop/nclex-countdown/src/context/GlobalState.js\";\nimport React, { createContext, useReducer, useEffect, useState } from \"react\"; //useReducer helps us connect the reducer to the state\n\nimport AppReducer from \"./AppReducer\";\nimport axios from \"axios\";\nconst initialState = {\n  loading: true,\n  error: '',\n  user: {}\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_SUCCESS':\n      return {\n        loading: false,\n        post: action.payload,\n        error: ''\n      };\n\n    case 'FETCH_ERROR':\n      return {\n        loading: false,\n        post: {},\n        error: \"OOPS\"\n      };\n  }\n};\n\nexport const GlobalContext = createContext();\nexport const GlobalContextProvider = ({\n  children\n}) => {\n  const [initialState, setInitialState] = useState(0);\n  useEffect(() => {\n    axios.get(\"http://localhost:5000/users\").then(res => {\n      setInitialState({\n        points: res.data[0].points,\n        questionCounter: res.data[0].questionCounter\n      });\n    }).catch(err => console.log(err));\n  }, []);\n  console.log(initialState);\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  console.log(state); //   useEffect(() => {\n  //     localStorage.setItem(\n  //       \"incomeTransactions\",\n  //       JSON.stringify(state.incomeTransactions)\n  //     );\n  //     localStorage.setItem(\n  //       \"expenseTransactions\",\n  //       JSON.stringify(state.expenseTransactions)\n  //     );\n  //   });\n  //   const addIncome = incomeTransaction => {\n  //     dispatch({\n  //       type: \"ADD_INCOME\",\n  //       payload: incomeTransaction\n  //     });\n  //   };\n\n  return /*#__PURE__*/React.createElement(GlobalContext.Provider, {\n    value: {\n      points: state.points,\n      questionCounter: state.questionCounter\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/eddyyeung/Desktop/nclex-countdown/src/context/GlobalState.js"],"names":["React","createContext","useReducer","useEffect","useState","AppReducer","axios","initialState","loading","error","user","reducer","state","action","type","post","payload","GlobalContext","GlobalContextProvider","children","setInitialState","get","then","res","points","data","questionCounter","catch","err","console","log","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,SAA3C,EAAsDC,QAAtD,QAAsE,OAAtE,C,CACA;;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,IADQ;AAEjBC,EAAAA,KAAK,EAAE,EAFU;AAGjBC,EAAAA,IAAI,EAAE;AAHW,CAArB;;AAMA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,eAAL;AACI,aAAO;AACHN,QAAAA,OAAO,EAAE,KADN;AAEHO,QAAAA,IAAI,EAAEF,MAAM,CAACG,OAFV;AAGHP,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,aAAL;AAAoB,aAAO;AACvBD,QAAAA,OAAO,EAAE,KADc;AAEvBO,QAAAA,IAAI,EAAE,EAFiB;AAGvBN,QAAAA,KAAK,EAAE;AAHgB,OAAP;AAPxB;AAaH,CAdD;;AAiBA,OAAO,MAAMQ,aAAa,GAAGhB,aAAa,EAAnC;AAEP,OAAO,MAAMiB,qBAAqB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAErD,QAAM,CAACZ,YAAD,EAAea,eAAf,IAAkChB,QAAQ,CAAC,CAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,KAAK,CACFe,GADH,CACO,6BADP,EAEGC,IAFH,CAEQC,GAAG,IAAI;AACTH,MAAAA,eAAe,CAAC;AACdI,QAAAA,MAAM,EAAED,GAAG,CAACE,IAAJ,CAAS,CAAT,EAAYD,MADN;AAEdE,QAAAA,eAAe,EAAEH,GAAG,CAACE,IAAJ,CAAS,CAAT,EAAYC;AAFf,OAAD,CAAf;AAIH,KAPH,EAQGC,KARH,CAQSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CARhB;AASD,GAVQ,EAUN,EAVM,CAAT;AAYAC,EAAAA,OAAO,CAACC,GAAR,CAAYvB,YAAZ;AACA,QAAM,CAACK,KAAD,EAAQmB,QAAR,IAAoB7B,UAAU,CAACG,UAAD,EAAaE,YAAb,CAApC;AAEAsB,EAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAZ,EAnBqD,CAoBrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE,oBAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLY,MAAAA,MAAM,EAAEZ,KAAK,CAACY,MADT;AAELE,MAAAA,eAAe,EAAEd,KAAK,CAACc;AAFlB,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGP,QANH,CADF;AAUD,CAhDM","sourcesContent":["import React, { createContext, useReducer, useEffect, useState } from \"react\";\n//useReducer helps us connect the reducer to the state\nimport AppReducer from \"./AppReducer\";\nimport axios from \"axios\";\n\nconst initialState = {\n    loading: true,\n    error: '',\n    user: {}\n}\n\nconst reducer = (state, action) => {\n    switch(action.type) {\n        case 'FETCH_SUCCESS':\n            return {\n                loading: false,\n                post: action.payload,\n                error: ''\n            }\n        case 'FETCH_ERROR': return {\n            loading: false,\n            post: {},\n            error: \"OOPS\"\n        }\n    }\n}\n\n\nexport const GlobalContext = createContext();\n\nexport const GlobalContextProvider = ({ children }) => {\n\n  const [initialState, setInitialState] = useState(0)\n    \n  useEffect(() => {\n    axios\n      .get(\"http://localhost:5000/users\")\n      .then(res => {\n          setInitialState({\n            points: res.data[0].points,\n            questionCounter: res.data[0].questionCounter\n          });\n      })\n      .catch(err => console.log(err));\n  }, []);\n\n  console.log(initialState)\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  \n  console.log(state)\n  //   useEffect(() => {\n  //     localStorage.setItem(\n  //       \"incomeTransactions\",\n  //       JSON.stringify(state.incomeTransactions)\n  //     );\n  //     localStorage.setItem(\n  //       \"expenseTransactions\",\n  //       JSON.stringify(state.expenseTransactions)\n  //     );\n  //   });\n\n  //   const addIncome = incomeTransaction => {\n  //     dispatch({\n  //       type: \"ADD_INCOME\",\n  //       payload: incomeTransaction\n  //     });\n  //   };\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        points: state.points,\n        questionCounter: state.questionCounter\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}